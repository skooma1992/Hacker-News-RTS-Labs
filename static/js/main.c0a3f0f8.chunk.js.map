{"version":3,"sources":["actions/resultsActions.js","components/SearchBar/SearchBar.js","components/SearchResults/SearchResults.js","components/SearchHistory/SearchHistory.js","App.js","serviceWorker.js","reducers/rootReducer.js","constants/searchConstants.js","index.js"],"names":["fetchResults","query","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","response","wrap","_context","prev","next","axios","get","sent","type","results","data","hits","t0","err","stop","_x","apply","this","arguments","SearchBar","state","searchInput","handleInputChange","event","createSearchInput","target","value","_this","setState","handleFormSubmit","preventDefault","props","search","react_default","createElement","className","onSubmit","onChange","placeholder","Component","connect","searches","userInput","SearchResults","handleSearchResults","length","map","result","href","url","key","objectID","title","author","SearchHistory","previousSearch","id","_this2","onClick","App","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_SearchHistory_SearchHistory","Boolean","window","location","hostname","match","rootReducer","undefined","action","objectSpread","concat","toConsumableArray","error","payload","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0a3f0f8.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//Async function passing in query to retrieve results \r\n\r\nexport const fetchResults = (query) => {\r\n        return async (dispatch) => {\r\n            try {\r\n                const response = await axios.get(\"https://hn.algolia.com/api/v1/search?query=\" + query);\r\n                dispatch({ type: 'FETCH_ARTICLES', results: response.data.hits });\r\n            }\r\n            catch (err) { dispatch({ type: 'FETCH_RESULTS_ERROR', err }); }\r\n        }\r\n    }\r\n\r\n\r\n    export const search = (userInput) => {\r\n        return {\r\n            type: 'CREATE_SEARCH',\r\n            userInput: userInput\r\n        }\r\n    }\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchResults, search  } from '../../actions/resultsActions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searches: state.searches,\r\n        results: state.results\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        search: (userInput) => { dispatch(search(userInput)) },\r\n        fetchResults: (query) => dispatch(fetchResults(query))\r\n    }\r\n}\r\n\r\nclass SearchBar extends Component {\r\n    state = {\r\n        searchInput: \"\"\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        let createSearchInput = event.target.value;\r\n\r\n        this.setState({\r\n            searchInput: createSearchInput\r\n        });\r\n    }\r\n\r\n    handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.search(this.state.searchInput);\r\n        this.props.fetchResults(this.state.searchInput);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-results\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h1 className=\"text-light\">Search Input</h1>\r\n                    </div>\r\n                </div>\r\n                     <div className=\"row m-3\">\r\n                     <div className=\"col-12 p-1 bg-light\">\r\n                     <form className=\"form-inline\" onSubmit={this.handleFormSubmit}>\r\n                        <input className=\"form-control mr-sm-2\" type=\"search\" onChange={this.handleInputChange} placeholder=\"Search\" ></input>\r\n                        <button className=\"btn btn-primary my-2 \" type=\"submit\">Search</button>\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            \r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        results: state.results\r\n    }\r\n}\r\n \r\nclass SearchResults extends Component {\r\n\r\n    handleSearchResults = () => {\r\n        if (this.props.results.length === 0) {\r\n            return (\r\n                <p className=\"text-info text-dark p-3 m-2\">No results</p>\r\n            )\r\n        } else {\r\n            const { results } = this.props;\r\n            return (\r\n                <div className=\"list-group p-2\">\r\n                    {results.map(result => {\r\n                        return (\r\n                            <a href={result.url} className=\"list-group-item mt-2\" key={result.objectID} target=\"_blank\"><div className=\"text-dark\">{result.title}</div><br></br><h4>Author:</h4> {result.author}</a>\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"search-results\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h1 className=\"text-light\">Search Results</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row m-3\">\r\n                    <div className=\"col-12 p-1 bg-light text-dark\">\r\n                        {this.handleSearchResults()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(SearchResults);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchResults } from '../../actions/resultsActions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searches: state.searches\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchResults: (query) => dispatch(fetchResults(query))\r\n    }\r\n}\r\n\r\nclass SearchHistory extends Component {\r\n    // Take in past searches to pass through api call again. \r\n    previousSearch = (event) => {\r\n        this.props.fetchResults(event.target.id);\r\n    }\r\n\r\n    render() {\r\n        const { searches } = this.props;\r\n        return (\r\n\r\n            <div className=\"search-results\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h1 className=\"text-light\">Search History</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row m-3 p-2 bg-light text-dark \">\r\n                    <div className=\"col-12\">\r\n                        <p>Previous Searches</p>\r\n                        {\r\n                            searches.map(search => {\r\n                                return (\r\n                                    <button className=\"btn-secondary m-2\" id={search} key={search} onClick={this.previousSearch}>{search}</button>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchHistory);","import React, { Component } from 'react';\r\nimport SearchBar from './components/SearchBar/SearchBar'\r\nimport SearchResults from './components/SearchResults/SearchResults';\r\nimport SearchHistory from './components/SearchHistory/SearchHistory';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container mt-12 text-center\">\r\n          <div className=\"row\">\r\n            <div className=\"col-4\">\r\n            <SearchBar />\r\n            </div>\r\n            <div className=\"col-4\">\r\n              <SearchResults />\r\n            </div>\r\n            <div className=\"col-4\">\r\n              <SearchHistory /> \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nimport { CREATE_SEARCH, FETCH_ARTICLES, FETCH_RESULTS_ERROR } from \"../constants/searchConstants\";\r\n\r\n\r\nconst rootReducer = (state = ({searches:[],results:[]}), action) => {\r\n    switch (action.type) {\r\n        case CREATE_SEARCH:\r\n          return { ...state,\r\n            searches: [...state.searches, action.userInput] };\r\n        case FETCH_ARTICLES:\r\n          return { ...state,\r\n            results: action.results};\r\n        case FETCH_RESULTS_ERROR:\r\n          return {  \r\n            error: action.payload\r\n        };\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;\r\n\r\n","export const CREATE_SEARCH = 'CREATE_SEARCH';\r\nexport const FETCH_ARTICLES = 'FETCH_ARTICLES';\r\nexport const FETCH_RESULTS_ERROR = 'FETCH_RESULTS_ERROR';\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}